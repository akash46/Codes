//Akash Sharma
//2016222
import java.io.*;
import java.util.*;
import java.math.*;
public class Main {
	public static void main(String[] args) throws IOException{
		Tree tree = new Tree();
		Reader.init(System.in);
		int x = Reader.nextInt();
		int arr[] = new int[x];
		for(int i=0; i<x; i++){
			arr[i] = Reader.nextInt();
			tree.root = tree.insert(tree.root,arr[i]);
		}
		System.out.println(tree.height(tree.root));
	}
}
class Node{
	int data;
	Node left;
	Node right;
	public Node(){
		data = 0;
		left = null;
		right = null;
	}
	public Node(int n){
		left = null;
		right = null;
		data = n;
	}
	public void setleft(Node n){
		left = n;
	}
	public void setright(Node n){
		right  = n;
	}
	public Node getleft(){
		return left;
	}
	public Node getright(){
		return right;
	}
	public void setData(int d){
		data = d;
	}
	public int getData(){
		return data;
	}
}
class Tree{
	public Node root;
	public Tree(){
		root = null;
	}
	public boolean isempty(){									//Check the tree is empty or not
		return root == null;
	}
	public int count(Node root){								//Counting no. of nodes
		if(root == null){
			return 0;
		}else{
			return 1 + count(root.left) + count(root.right);
		}
	}
	public int height(Node root){								//Computing the height of the tree
		if(root == null){
			return 0;
		}else{
			return 1 + Math.max(height(root.left) , height(root.right));
		}
	}
	public Node Copy(Node root){								//Copying the binary tree
		if(root == null){
			return null;
		}else{
			Node Copy = new Node(root.data);
			Copy.left = Copy(root.left);
			Copy.right = Copy(root.right);
			return Copy;
		}
	}
	public Node insert(Node root, int value){					// Inserting a Node
		if(root == null){
			root = new Node(value);
		}else if(value<root.data){
			root.left = insert(root.left,value);
		}else{
			root.right = insert(root.right,value);
		}
		return root;
	}
	public int smallest(Node root){								//Smallest value in BST
		if(root.left == null){
			return (root.data);
		}else{
			return smallest(root.left);
		}
	}
	public int largest(Node root){								// Largest value in BST
		if(root.right == null){
			return(root.data);
		}else{
			return largest(root.right);
		}
	}
	public static Node minBST(Node root){								//Computing minimium Node of BST
		if(root.left == null){
			return root;
		}else{
			return minBST (root.left);
		}
	}
	public static boolean BST(Node root, int min, int max){		//is BST or not
		if(root == null){
			return true;
		}else{
			return(root.data > min && root.data < max &&
					BST(root.left, min, root.data) &&
					BST(root.right, root.data, max));
		}
	}
	public void inorder(Node root){								//Computing the inorder traversal
		if(root == null){
			System.out.println(-1);
		}else{
			inorder(root.getleft());
			System.out.println(root.getData() + " ");
			inorder( root.getright());
		}
	}
	public void preorder(Node root){							//Computing the preorder traversal
		if(root == null){
			System.out.println(-1);
		}else{
			System.out.println(root.getData() + " ");
			preorder(root.getleft());
			preorder(root.getright());
		}
	}
	public void postorder(Node root){							//Computing the postorder traversal
		if(root == null){
			System.out.println(-1);
		}else{
			preorder(root.getleft());
			preorder(root.getright());
			System.out.println(root.getData() + " ");
		}
	}
	public Node BSTsearch(Node root, int target){			// Search the required Node
		Node current = root;
		while(current!=null){
			if(current.data == target){
				return current;
			}else if(current.data>target){
				return BSTsearch(current.left, target);
			}else{
				return BSTsearch(current.right, target);
			}
		}
		return null;
	}
	public static Node delete (Node root, int value){		// Delete a node
		if(root == null){
			return null;
		}else if(root.data>value){
			root.left = delete(root.left,value);
		}else if(root.data<value){
			root.right = delete(root.right,value);
		}else if(root.left!=null && root.right!= null){
			Node temp = root;
			Node minRight = minBST(temp.right);
			root.data = minRight.data;
			delete(root.right, minRight.data);
		}else if(root.left!=null){
			root = root.left;
		}else if(root.right!=null){
			root = root.right;
		}else{
			root = null;
		}
		return root;
	}
	static int pre[], in[];
	static int t = 0;
	public static int find(int first, int end, int num){
		int temp = -1;
		for(int i=first; i<end; i++){
			if(in[i]==num){
				temp = i;
				break;
			}
		}
		return temp;
	}
	public static Node tree_formation(int first, int end){				// Tree formation
		if(first>end){
			return null;
		}
		Node ptr = new Node(in[t]);
		t = t+1;
		if(first==end){
			return ptr;
		}
		int temp = find(first,end,ptr.data);
		ptr.left = tree_formation(first,temp-1);
		ptr.right = tree_formation(temp+1,end);
		return ptr;
	}
}


/** Class for buffered reading int and double values */
class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                     new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            //TODO add check for eof if necessary
            tokenizer = new StringTokenizer(
                   reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }
	
    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
}
