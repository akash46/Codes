import java.io.*;
import java.util.*;
class Mergesort{
	public static void main(String[] args) throws IOException {
		InputStreamReader in = new InputStreamReader(System.in);
		BufferedReader inp = new BufferedReader(in);
		String loo = inp.readLine();
		int mloop = Integer.parseInt(loo);
		for(int i = 0 ; i< mloop ;i++){
			String siz = inp.readLine();
			int size = Integer.parseInt(siz);
			int arr[] = new int[size];
			int[] temp = new int[size];
			String inp1 = inp.readLine();
			StringTokenizer st = new StringTokenizer(inp1);
			int j = 0;
			while(st.hasMoreElements()){
				arr[j] = Integer.parseInt((String)st.nextElement());
				j++;
			}
			System.out.println(mergeSort(arr,temp,0, size-1));
		}
    
    }
	 
	
	public static int mergeSort(int arr[], int temp[], int left, int right){
	  int mid, count = 0;
	  if (right > left){
		  mid = (right + left)/2;
		  count  = mergeSort(arr, temp, left, mid);
		  count += mergeSort(arr, temp, mid+1, right);
		  count += merge(arr, temp, left, mid+1, right);
	  }
	  return count;
	}
	public static int merge(int arr[], int temp[], int left, int mid, int right){
		int i, j, k;
		int count2 = 0;
		i = left; 
		j = mid;  
		k = left; 
		while ((i <= mid - 1) && (j <= right)){
			if (arr[i] <= arr[j]){
				temp[k++] = arr[i++];
				}else{
					temp[k++] = arr[j++];
					count2 = count2 + (mid - i);
					}
			}
		while (i <= mid - 1){
			temp[k++] = arr[i++];
		}
		while (j <= right){
			temp[k++] = arr[j++];
		}
		for (i=left; i <= right; i++){
			arr[i] = temp[i];
			}
		return count2;
	}
}
