import java.io.*;
import java.util.*;
public class DSA {
	static int Vertices;			
	static int Edges;		
	static int K_num;		
	static int[][] matrix;
	static int[] numCons;			
	public static void main(String[] args)throws IOException {
		Reader.init(System.in);
		Vertices=Reader.nextInt();				
		Edges=Reader.nextInt();
		K_num=Reader.nextInt();
		matrix=new int[Edges][2];
		numCons=new int[Vertices];				
		for(int i=0;i<Edges;i++){
			int v1=Reader.nextInt();
			int v2=Reader.nextInt();
			numCons[v1-1]++;					
			numCons[v2-1]++;
			matrix[i][0]=v1;
			matrix[i][1]=v2;
		}
		System.out.println();
		boolean check=false;
		int Del_vertex=-1;
		for(int i=0;i<Vertices;i++){
			if(numCons[i]<K_num && numCons[i]>0){
				check=true;
				Del_vertex=i+1;
				break;
			}
		}
		while(check==true){
			for(int i=0;i<Edges;i++){
				if(matrix[i][0]==Del_vertex || matrix[i][1]==Del_vertex){
					int v1=matrix[i][0];
					int v2=matrix[i][1];
					numCons[v1-1]--;
					numCons[v2-1]--;
					matrix[i][0]=0;
					matrix[i][1]=0;
				}
			}
			check=false;
			Del_vertex=-1;
			for(int i=0;i<Vertices;i++){
				if(numCons[i]<K_num && numCons[i]>0){
					check=true;
					Del_vertex=i+1;
					break;
				}
			}
		}
		for(int i=0;i<Vertices;i++){
			if(numCons[i]>0){
				System.out.print(i+1+" ");
			}
		}
		System.out.println();
		for(int i=0;i<Vertices;i++){
			if(numCons[i]>0){
				int current=i+1;
				int connections=numCons[i];
				int[] adj_lists=new int[connections];
				int count=0;
				for(int j=0;j<Edges;j++){
					if(matrix[j][0]==current){
						adj_lists[count++]=matrix[j][1];
					}
					else if(matrix[j][1]==current){
						adj_lists[count++]=matrix[j][0];
					}
				}
				Arrays.sort(adj_lists);
				for(int j=0;j<count;j++){
					System.out.print(adj_lists[j]+" ");
				}
				System.out.println();
			}
		}
		
	}

}
/** Class for buffered reading int and double values */
class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;
    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                     new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }
    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            //TODO add check for eof if necessary
            tokenizer = new StringTokenizer(
                   reader.readLine() );
        }
        return tokenizer.nextToken();
    }
    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }	
    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
}
